using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Projeto
{
    public partial class Projetos : Form
    {
        private Model1Container camera;

        public Projetos()
        {
            InitializeComponent();
            camera = new Model1Container();
        }

        private void Projetos_Load(object sender, EventArgs e)
        {

            try
            {
                bindingSourceProjetos.DataSource = camera.ProjetoSet.ToList<Projeto>();
                bindingSourceProjetos.ResetBindings(false);
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder a tabela Projeto\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            try
            {
                cbTipoProjeto.DataSource = null;
                cbTipoProjeto.DataSource = camera.TipoProjetoSet.ToList<TipoProjeto>();
                cbTipoProjeto.SelectedIndex = -1;
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder a tabela TipoProjeto\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            try
            {
                cbNrProcesso.DataSource = null;
                cbNrProcesso.DataSource = camera.ProcessoSet.ToList<Processo>();
                cbNrProcesso.SelectedIndex = -1;
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder a tabela Processo\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            try
            {
                cbNrProcessoList.DataSource = null;
                cbNrProcessoList.DataSource = camera.ProcessoSet.ToList<Processo>();
                cbNrProcessoList.SelectedIndex = -1;
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder a tabela Processo\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btDocumentação_Click(object sender, EventArgs e)
        {
            try
            {
                Projeto p = (Projeto)dataGridViewProjetos.SelectedRows[0].DataBoundItem;

                Documentacao d = new Documentacao(p);
                d.Show();
            }
            catch (ArgumentOutOfRangeException aorex)
            {
                MessageBox.Show("Erro ao abrir o form Documentacao\n\r" + aorex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }


        }

        private void btRegistar_Click(object sender, EventArgs e)
        {
            try
            {
                DateTime dataEntrada = dtEntrada.Value;
                String estado = tbEstado.Text;
                TipoProjeto tipo = (TipoProjeto)cbTipoProjeto.SelectedItem;
                DateTime dataAprovacao = dtDataAprov.Value;
                Processo p = (Processo)cbNrProcesso.SelectedItem;

                
                camera.ProjetoSet.Add(new Projeto()
                {
                    DataEntrada = dataEntrada,
                    EstadoProjeto = estado,
                    TipoProjetoId = tipo.Id,
                    DataAprovacao = dataAprovacao,
                    ProcessoId = p.Id
                });
                camera.SaveChanges();


                dataGridViewProjetos.DataSource = null;
                dataGridViewProjetos.DataSource = camera.ProjetoSet.ToList<Projeto>();

                dtEntrada.ResetText();
                dtDataAprov.ResetText();
                tbEstado.Text = null;
                cbTipoProjeto.SelectedIndex = -1;
                cbNrProcesso.SelectedIndex = -1;
     
            }
            catch (NotSupportedException nsex)
            {
                MessageBox.Show("Erro ao tentar guardar o projeto\n\r" + nsex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidOperationException ioex)
            {
                MessageBox.Show("Erro ao tentar guardar o projeto\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Projeto\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (NullReferenceException nrex)
            {
                MessageBox.Show("Campos em branco\n\r" + nrex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void cbTipoProjeto_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void cbTipoProjeto_Leave(object sender, EventArgs e)
        {
            try
            {
                DateTime dataEntrada = dtEntrada.Value;
                TipoProjeto tipo = (TipoProjeto)cbTipoProjeto.SelectedItem;
                DateTime dataAprovacao = dataEntrada.AddDays(tipo.NrDiasAprovacao);

                dtDataAprov.Value = dataAprovacao;
            }
            catch (ArgumentOutOfRangeException aorex)
            {
                MessageBox.Show("Erro ao calcular a data de aprovação\n\r" + aorex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void dataGridViewProjetos_Click(object sender, EventArgs e)
        {
            try
            {
                Projeto p = (Projeto)dataGridViewProjetos.SelectedRows[0].DataBoundItem;
                dtEntrada.Value = p.DataEntrada;
                tbEstado.Text = p.EstadoProjeto;
                cbTipoProjeto.Text = p.TipoProjeto.ToString();
                dtDataAprov.Value = p.DataAprovacao;
                cbNrProcesso.Text = p.Processo.ToString();

                btGuardarAlt.Enabled = true;
                btRegistar.Enabled = false;
                btEliminar.Enabled = true;
                btDocumentação.Enabled = true;
            }
            catch (ArgumentOutOfRangeException aorex)
            {
                MessageBox.Show("Operação inválida - Use a seta para selecionar os dados\n\r" + aorex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btGuardarAlt_Click(object sender, EventArgs e)
        {
            try
            {
                Projeto p = (Projeto)dataGridViewProjetos.SelectedRows[0].DataBoundItem;
                TipoProjeto tipo = (TipoProjeto)cbTipoProjeto.SelectedItem;
                Processo processo = (Processo)cbNrProcesso.SelectedItem;

                p.DataEntrada = dtEntrada.Value;
                p.EstadoProjeto = tbEstado.Text;
                p.TipoProjetoId = tipo.Id;
                p.DataAprovacao = dtDataAprov.Value;
                p.ProcessoId = processo.Id;


                camera.SaveChanges();

                dataGridViewProjetos.DataSource = null;
                dataGridViewProjetos.DataSource = camera.ProjetoSet.ToList<Projeto>();

                dtEntrada.ResetText();
                dtDataAprov.ResetText();
                tbEstado.Text = null;
                cbTipoProjeto.SelectedIndex = -1;
                cbNrProcesso.SelectedIndex = -1;

                btEliminar.Enabled = false;
                btGuardarAlt.Enabled = false;
                btRegistar.Enabled = true;
                btDocumentação.Enabled = false;
            }
            catch (NotSupportedException nsex)
            {
                MessageBox.Show("Erro ao tentar guardar o projeto\n\r" + nsex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidOperationException ioex)
            {
                MessageBox.Show("Erro ao tentar guardar o projeto\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Projeto\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btEliminar_Click(object sender, EventArgs e)
        {
            DialogResult resposta = MessageBox.Show("Deseja mesmo eliminar o projeto?", "Eliminar?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (resposta == DialogResult.Yes)
            {
                try
                {
                    Projeto p = (Projeto)dataGridViewProjetos.SelectedRows[0].DataBoundItem;
                    camera.ProjetoSet.Remove(p);
                    camera.SaveChanges();

                    dtEntrada.ResetText();
                    dtDataAprov.ResetText();
                    tbEstado.Text = null;
                    cbTipoProjeto.SelectedIndex = -1;
                    cbNrProcesso.SelectedIndex = -1;

                    dataGridViewProjetos.DataSource = null;
                    dataGridViewProjetos.DataSource = camera.ProjetoSet.ToList<Projeto>();

                    btRegistar.Enabled = true;
                    btGuardarAlt.Enabled = false;
                    btEliminar.Enabled = false;
                    btDocumentação.Enabled = false;
                }
                catch (NotSupportedException nsex)
                {
                    MessageBox.Show("Erro ao tentar apagar o projeto\n\r" + nsex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                catch (InvalidOperationException ioex)
                {
                    MessageBox.Show("Erro ao tentar apagar o projeto\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Projeto\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void btLimpar_Click(object sender, EventArgs e)
        {
            dtEntrada.ResetText();
            dtDataAprov.ResetText();
            tbEstado.Text = null;
            cbTipoProjeto.SelectedIndex = -1;
            cbNrProcesso.SelectedIndex = -1;

            btRegistar.Enabled = true;
            btGuardarAlt.Enabled = false;
            btEliminar.Enabled = false;
            btDocumentação.Enabled = false;
        }

        private void btPesquisar_Click(object sender, EventArgs e)
        {
            try
            {
                Processo p = (Processo)cbNrProcessoList.SelectedItem;

                camera.Dispose();
                camera = new Model1Container();
                (from Projetos in camera.ProjetoSet where Projetos.ProcessoId.Equals(p.Id) select Projetos).ToList();

                dataGridViewProjetos.DataSource = null;
                dataGridViewProjetos.DataSource = camera.ProjetoSet.Local.ToList<Projeto>();
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Projeto\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btMostrarTodos_Click(object sender, EventArgs e)
        {
            try
            {
                cbNrProcessoList.Text = null;
                dataGridViewProjetos.DataSource = null;
                dataGridViewProjetos.DataSource = camera.ProjetoSet.ToList<Projeto>();
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Projeto\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
