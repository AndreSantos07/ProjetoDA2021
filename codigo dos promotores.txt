using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Projeto
{
    
    public partial class Promotores : Form
    {
        private Model1Container camera;
        public Promotores()
        {
            InitializeComponent();
            camera = new Model1Container();
        }

        private void label6_Click(object sender, EventArgs e)
        {

        }

        private void btRegistar_Click(object sender, EventArgs e)
        {
            try
            {
                string nome = tbNome.Text;
                int nif = Convert.ToInt32(tbNif.Text);
                String morada = tbMorada.Text;
                int telemovel = Convert.ToInt32(tbTelemovel.Text);
                String email = tbEmail.Text;
                String codigo = tbCodigo.Text;
                String senha = tbSenha.Text;

                camera.PromotorSet.Add(new Promotor()
                {
                    NIF = nif,
                    Nome = nome,
                    Morada = morada,
                    Telemovel = telemovel,
                    Email = email,
                    CodigoAcesso = codigo,
                    Senha = senha
                });
                camera.SaveChanges();

                dataGridViewPromotores.DataSource = null;
                dataGridViewPromotores.DataSource = camera.PromotorSet.ToList<Promotor>();
                btRegistar.Enabled = true;

                tbNome.Clear();
                tbNif.Clear();
                tbMorada.Clear();
                tbTelemovel.Clear();
                tbEmail.Clear();
                tbCodigo.Clear();
                tbSenha.Clear();
            }
            catch (FormatException fex)
            {
                MessageBox.Show("Erro ao tentar converter o nif ou telemovel\n\r" + fex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (OverflowException oex)
            {
                MessageBox.Show("Erro ao tentar converter o nif ou telemovel\n\r" + oex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (NotSupportedException nsex)
            {
                MessageBox.Show("Erro ao tentar guardar o promotor\n\r" + nsex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidOperationException ioex)
            {
                MessageBox.Show("Erro ao tentar guardar o promotor\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Promotor\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void Promotores_Load(object sender, EventArgs e)
        {
            try
            {
                dataGridViewPromotores.DataSource = null;
                dataGridViewPromotores.DataSource = camera.PromotorSet.ToList<Promotor>();
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Promotor\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            
        }

        private void btEliminar_Click(object sender, EventArgs e)
        {

            DialogResult resposta = MessageBox.Show("Deseja mesmo eliminar o promotor?", "Eliminar?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (resposta == DialogResult.Yes)
            {
                try
                {
                    Promotor p = (Promotor)dataGridViewPromotores.SelectedRows[0].DataBoundItem;
                    camera.PromotorSet.Remove(p);
                    camera.SaveChanges();

                    tbNome.Clear();
                    tbNif.Clear();
                    tbMorada.Clear();
                    tbTelemovel.Clear();
                    tbEmail.Clear();
                    tbCodigo.Clear();
                    tbSenha.Clear();

                    dataGridViewPromotores.DataSource = null;
                    dataGridViewPromotores.DataSource = camera.PromotorSet.ToList<Promotor>();

                    btGuardarAlt.Enabled = false;
                    btRegistar.Enabled = true;
                }
                catch (NotSupportedException nsex)
                {
                    MessageBox.Show("Erro ao tentar apagar o promotor\n\r" + nsex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                catch (InvalidOperationException ioex)
                {
                    MessageBox.Show("Erro ao tentar apagar o promotor\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Promotor\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

            }
            

        }


        private void btLimpar_Click(object sender, EventArgs e)
        {
            tbNome.Clear();
            tbNif.Clear();
            tbMorada.Clear();
            tbTelemovel.Clear();
            tbEmail.Clear();
            tbCodigo.Clear();
            tbSenha.Clear();

            btRegistar.Enabled = true;
            btGuardarAlt.Enabled = false;
        }

        private void btGuardarAlt_Click(object sender, EventArgs e)
        {
            try
            {
                Promotor p = (Promotor)dataGridViewPromotores.SelectedRows[0].DataBoundItem;

                p.Nome = tbNome.Text;
                p.NIF = Convert.ToInt32(tbNif.Text);
                p.Morada = tbMorada.Text;
                p.Telemovel = Convert.ToInt32(tbTelemovel.Text);
                p.Email = tbEmail.Text;
                p.CodigoAcesso = tbCodigo.Text;
                p.Senha = tbSenha.Text;

                camera.SaveChanges();

                dataGridViewPromotores.DataSource = null;
                dataGridViewPromotores.DataSource = camera.PromotorSet.ToList<Promotor>();

                tbNome.Clear();
                tbNif.Clear();
                tbMorada.Clear();
                tbTelemovel.Clear();
                tbEmail.Clear();
                tbCodigo.Clear();
                tbSenha.Clear();

                btRegistar.Enabled = true;
                btGuardarAlt.Enabled = false;
            }
            catch (FormatException fex)
            {
                MessageBox.Show("Erro ao tentar converter o nif ou telemovel\n\r" + fex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (OverflowException oex)
            {
                MessageBox.Show("Erro ao tentar converter o nif ou telemovel\n\r" + oex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (NotSupportedException nsex)
            {
                MessageBox.Show("Erro ao tentar guardar o promotor\n\r" + nsex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidOperationException ioex)
            {
                MessageBox.Show("Erro ao tentar guardar o promotor\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Promotor\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void bindingSource1_CurrentChanged(object sender, EventArgs e)
        {

        }

        private void dataGridViewPromotores_Click(object sender, EventArgs e)
        {
            try
            {
                Promotor p = (Promotor)dataGridViewPromotores.SelectedRows[0].DataBoundItem;
                tbNome.Text = p.Nome;
                tbNif.Text = p.NIF.ToString();
                tbMorada.Text = p.Morada;
                tbTelemovel.Text = p.Telemovel.ToString();
                tbEmail.Text = p.Email;
                tbCodigo.Text = p.CodigoAcesso;
                tbSenha.Text = p.Senha;

                btGuardarAlt.Enabled = true;
                btRegistar.Enabled = false;
            }
            catch (ArgumentOutOfRangeException aorex)
            {
                MessageBox.Show("Operação inválida - Use a seta para selecionar os dados\n\r" + aorex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            

        }
    }
}

