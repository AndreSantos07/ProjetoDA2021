using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Projeto
{

    public partial class Funcionarios : Form
    {

        private Model1Container camera;
        public int idenviar = -1;
        public string nomeenviar;

        public Funcionarios()
        {
            InitializeComponent();
            camera = new Model1Container();
        }

        private void btRegistar_Click(object sender, EventArgs e)
        {
            try
            {
                string nome = tbNome.Text;
                int extencao = Convert.ToInt32(tbExtencao.Text);

                Funcionario f = new Funcionario()
                {
                    Nome = nome,
                    Extencao = extencao
                };

                camera.FuncionarioSet.Add(f);

                camera.SaveChanges();


                dataGridViewFuncionarios.DataSource = null;
                dataGridViewFuncionarios.DataSource = camera.FuncionarioSet.ToList<Funcionario>();

                tbNome.Text = null;
                tbExtencao.Text = null;

            }
            catch (FormatException fex)
            {
                MessageBox.Show("Erro ao tentar converter a extensao\n\r" + fex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (OverflowException oex)
            {
                MessageBox.Show("Erro ao tentar converter a extensao\n\r" + oex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (NotSupportedException nsex)
            {
                MessageBox.Show("Erro ao tentar guardar o funcionario\n\r" + nsex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidOperationException ioex)
            {
                MessageBox.Show("Erro ao tentar guardar o funcionario\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Funcionario\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }


        }

        private void Funcionarios_Load(object sender, EventArgs e)
        {
            try
            {
                dataGridViewFuncionarios.DataSource = null;
                dataGridViewFuncionarios.DataSource = camera.FuncionarioSet.ToList<Funcionario>();

                tbNome.Clear();
                tbExtencao.Clear();
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Funcionario\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btGuardarAlt_Click(object sender, EventArgs e)
        {
            try
            {
                Funcionario f = (Funcionario)dataGridViewFuncionarios.SelectedRows[0].DataBoundItem;


                f.Nome = tbNome.Text;
                f.Extencao = Convert.ToInt32(tbExtencao.Text);
                camera.SaveChanges();



                dataGridViewFuncionarios.DataSource = null;
                dataGridViewFuncionarios.DataSource = camera.FuncionarioSet.ToList<Funcionario>();

                tbNome.Text = null;
                tbExtencao.Text = null;

                btGuardarAlt.Enabled = false;
                btRegistar.Enabled = true;
                btProjetos.Enabled = false;
                btespecialidade.Enabled = false;
                btProjetos.Enabled = false;
                btEliminar.Enabled = false;
            }
            catch (FormatException fex)
            {
                MessageBox.Show("Erro ao tentar converter a extensao\n\r" + fex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (OverflowException oex)
            {
                MessageBox.Show("Erro ao tentar converter a extensao\n\r" + oex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (NotSupportedException nsex)
            {
                MessageBox.Show("Erro ao tentar guardar o funcionario\n\r" + nsex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidOperationException ioex)
            {
                MessageBox.Show("Erro ao tentar guardar o funcionario\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Funcionario\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void dataGridViewFuncionarios_Click(object sender, EventArgs e)
        {
            try
            {
                Funcionario f = (Funcionario)dataGridViewFuncionarios.SelectedRows[0].DataBoundItem;

                if (f != null)
                {


                    tbNome.Text = f.Nome;
                    tbExtencao.Text = f.Extencao.ToString();
                    idenviar = f.Numero;
                    nomeenviar = f.Nome;


                    btGuardarAlt.Enabled = true;
                    btRegistar.Enabled = false;
                    btProjetos.Enabled = true;
                    btespecialidade.Enabled = true;
                    btProjetos.Enabled = true;
                    btEliminar.Enabled = true;
                }
            }
            catch (ArgumentOutOfRangeException aorex)
            {
                MessageBox.Show("Operação inválida - Use a seta para selecionar os dados\n\r" + aorex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }


        }

        private int getindice(ComboBox cb, TipoProjeto tp)
        {
            for (int i = 0; i < cb.Items.Count; i++)
            {
                if (((TipoProjeto)cb.Items[i]).Id == tp.Id)
                    return i;
            }

            return -1;
        }

        private void btLimpar_Click(object sender, EventArgs e)
        {
            tbNome.Clear();
            tbExtencao.Clear();
            idenviar = -1;
            nomeenviar = null;

            btGuardarAlt.Enabled = false;
            btRegistar.Enabled = true;
            btProjetos.Enabled = false;
            btespecialidade.Enabled = false;
            btProjetos.Enabled = false;
            btEliminar.Enabled = false;
        }

        private void btEliminar_Click(object sender, EventArgs e)
        {

            DialogResult resposta = MessageBox.Show("Deseja mesmo eliminar o funcionario?", "Eliminar?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (resposta == DialogResult.Yes)
            {
                try
                {
                    Funcionario f = (Funcionario)dataGridViewFuncionarios.SelectedRows[0].DataBoundItem;
                    camera.FuncionarioSet.Remove(f);
                    camera.SaveChanges();

                    tbExtencao.Clear();
                    tbNome.Clear();

                    dataGridViewFuncionarios.DataSource = null;
                    dataGridViewFuncionarios.DataSource = camera.FuncionarioSet.ToList<Funcionario>();

                    btGuardarAlt.Enabled = false;
                    btRegistar.Enabled = true;
                    btProjetos.Enabled = false;
                    btespecialidade.Enabled = false;
                    btProjetos.Enabled = false;
                    btEliminar.Enabled = false;
                }
                catch (NotSupportedException nsex)
                {
                    MessageBox.Show("Erro ao tentar apagar o funcionario\n\r" + nsex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                catch (InvalidOperationException ioex)
                {
                    MessageBox.Show("Erro ao tentar apagar o funcionario\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Funcionario\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                catch(System.Data.Entity.Infrastructure.DbUpdateException dbe)
                {
                    MessageBox.Show("Erro ao tentar apagar o funcionario, verifique se não tem projetos ou especialidades associadas\n\r" + dbe.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void btProjetos_Click(object sender, EventArgs e)
        {
            try
            {
                camera.Dispose();
                camera = new Model1Container();

                var esp = from Especialista in camera.EspecialistaSet where Especialista.FuncionarioNumero.Equals(idenviar) select Especialista;
                Especialista especialista = esp.ToList<Especialista>()[0];

                ProjetosAtribuidos pa = new ProjetosAtribuidos(nomeenviar, especialista);
                pa.Show();
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Especialista\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btespecialidade_Click(object sender, EventArgs e)
        {
            Especialidades esp = new Especialidades(idenviar);
            esp.Show();

        }
    }
}
