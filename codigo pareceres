using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Projeto
{
    public partial class Parceres : Form
    {
        private Model1Container camera;
        public Parceres()
        {
            InitializeComponent();
            camera = new Model1Container();
        }

        public int idparcer = -1;

        public Parceres(int idrecebido)
        {
            InitializeComponent();
            camera = new Model1Container();
            idparcer = idrecebido;
        }

        private void Parceres_Load(object sender, EventArgs e)
        {
            if (idparcer != -1)
            {
                try
                {
                    camera.Dispose();
                    camera = new Model1Container();
                    var parcer = from Parecer in camera.ParecerSet where Parecer.Numero.Equals(idparcer) select Parecer;
                    Parecer par = parcer.ToList<Parecer>()[0];

                    var processo = from Processo in camera.ProcessoSet where Processo.Id.Equals(par.ProjetoProcessoId) select Processo;
                    Processo pro = processo.ToList<Processo>()[0];

                    dtData.Value = par.DataParecer;
                    tbTexto.Text = par.TextoParecer;
                    cbFuncionarios.Text = par.Funcionario.ToString();
                    cbNrProjeto.Text = par.Projeto.ToString();
                    cbNrProcesso.Text = pro.ToString();
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Parecer/Processo\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                try
                {
                    dataGridViewPareceres.DataSource = null;
                    dataGridViewPareceres.DataSource = camera.ParecerSet.ToList<Parecer>();
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Parecer\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                try
                {
                    cbNrProcesso.DataSource = null;
                    cbNrProcesso.DataSource = camera.ProcessoSet.ToList<Processo>();
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Processo\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                try
                {
                    cbNrProjeto.DataSource = null;
                    cbNrProjeto.DataSource = camera.ProjetoSet.ToList<Projeto>();
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Projeto\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                try
                {
                    cbNrProjetoList.DataSource = null;
                    cbNrProjetoList.DataSource = camera.ProjetoSet.ToList<Projeto>();
                    cbNrProjetoList.SelectedIndex = -1;
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Projeto\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                try
                {
                    cbFuncionarios.DataSource = null;
                    cbFuncionarios.DataSource = camera.FuncionarioSet.ToList<Funcionario>();
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Funcionario\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

            }
            else
            {
                try
                {
                    dataGridViewPareceres.DataSource = null;
                    dataGridViewPareceres.DataSource = camera.ParecerSet.ToList<Parecer>();
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Parecer\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                try
                {
                    cbNrProcesso.DataSource = null;
                    cbNrProcesso.DataSource = camera.ProcessoSet.ToList<Processo>();
                    cbNrProcesso.SelectedIndex = -1;
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Processo\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                try
                {
                    cbNrProjeto.DataSource = null;
                    cbNrProjeto.DataSource = camera.ProjetoSet.ToList<Projeto>();
                    cbNrProjeto.SelectedIndex = -1;
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Projeto\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                try
                {
                    cbNrProjetoList.DataSource = null;
                    cbNrProjetoList.DataSource = camera.ProjetoSet.ToList<Projeto>();
                    cbNrProjetoList.SelectedIndex = -1;
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Projeto\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                try
                {
                    cbFuncionarios.DataSource = null;
                    cbFuncionarios.DataSource = camera.FuncionarioSet.ToList<Funcionario>();
                    cbFuncionarios.SelectedIndex = -1;
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela Funcionario\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }

        public void atualizar()
        {
            foreach (var entity in camera.ChangeTracker.Entries())
            {
                entity.Reload();
            }
        }

        private void cbNrProcesso_Leave(object sender, EventArgs e)
        {
            try
            {
                if (cbNrProcesso.SelectedIndex != -1)
                {
                    Processo processo = (Processo)cbNrProcesso.SelectedItem;

                    camera.Dispose();
                    camera = new Model1Container();
                    //atualizar();
                    (from Projeto in camera.ProjetoSet where Projeto.ProcessoId.Equals(processo.Id) select Projeto).ToList();

                    cbNrProjeto.DataSource = camera.ProjetoSet.Local.ToList<Projeto>();
                }
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar filtrar projetos\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void cbNrProjeto_Leave(object sender, EventArgs e)
        {
            try
            {
                if (cbNrProjeto.SelectedIndex != -1)
                {
                    Projeto projeto = (Projeto)cbNrProjeto.SelectedItem;

                    camera.Dispose();
                    camera = new Model1Container();
                    //(from Funcionario in camera.FuncionarioSet where Funcionario.Numero.Equals(projeto.TipoProjetoId) select Funcionario).ToList();
                    (from ProjetoAtribuido in camera.ProjetoAtribuidoSet where ProjetoAtribuido.ProjetoId.Equals(projeto.Id) select ProjetoAtribuido).ToList();

                    cbFuncionarios.DataSource = null;
                    cbFuncionarios.DataSource = camera.ProjetoAtribuidoSet.Local.ToList<ProjetoAtribuido>();

                }
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar filtrar funcionarios\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btRegistar_Click(object sender, EventArgs e)
        {
            try
            {
                DateTime data = dtData.Value;
                Processo processo = (Processo)cbNrProcesso.SelectedItem;
                Projeto projeto = (Projeto)cbNrProjeto.SelectedItem;
                //Funcionario funcionario = (Funcionario)cbFuncionarios.SelectedItem;
                ProjetoAtribuido pa = (ProjetoAtribuido)cbFuncionarios.SelectedItem;
                string texto = tbTexto.Text;

                Parecer p = new Parecer()
                {
                    TextoParecer = texto,
                    DataParecer = data,
                    //FuncionarioNumero1 = funcionario.Numero,
                    FuncionarioNumero1 = pa.FuncionarioNumero,
                    ProjetoId = projeto.Id,
                    ProjetoProcessoId = processo.Id
                };

                camera.ParecerSet.Add(p);


                /*camera.ParecerSet.Add(new Parecer()
                {
                    TextoParecer = texto,
                    DataParecer = data,
                    FuncionarioNumero1 = funcionario.Numero,
                    ProjetoId = projeto.Id,
                    ProjetoProcessoId = processo.Id
                });*/

                camera.SaveChanges();

                dataGridViewPareceres.DataSource = null;
                dataGridViewPareceres.DataSource = camera.ParecerSet.ToList<Parecer>();
                
                btEliminar.Enabled = false;

                dtData.ResetText();
                cbFuncionarios.SelectedIndex = -1;
                cbNrProcesso.SelectedIndex = -1;
                cbNrProjeto.SelectedIndex = -1;
                tbTexto.Clear();
            }
            catch (NotSupportedException nsex)
            {
                MessageBox.Show("Erro ao tentar guardar o parecer\n\r" + nsex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidOperationException ioex)
            {
                MessageBox.Show("Erro ao tentar guardar o parecer\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Parecer\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch(NullReferenceException nre)
            {
                MessageBox.Show("Erro ao tentar inserir um Parecer\n\r" + nre.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btGuardarAlt_Click(object sender, EventArgs e)
        {
            try
            {
                Parecer p = (Parecer)dataGridViewPareceres.SelectedRows[0].DataBoundItem;
                Processo processo = (Processo)cbNrProcesso.SelectedItem;
                Projeto projeto = (Projeto)cbNrProjeto.SelectedItem;
                //Funcionario funcionario = (Funcionario)cbFuncionarios.SelectedItem;
                ProjetoAtribuido pa = (ProjetoAtribuido)cbFuncionarios.SelectedItem;


                p.TextoParecer = tbTexto.Text;
                p.DataParecer = dtData.Value;
                p.FuncionarioNumero1 = pa.FuncionarioNumero;
                p.ProjetoId = projeto.Id;
                p.ProjetoProcessoId = processo.Id;

                camera.SaveChanges();

                dataGridViewPareceres.DataSource = null;
                dataGridViewPareceres.DataSource = camera.ParecerSet.ToList<Parecer>();

                tbTexto.Clear();
                dtData.ResetText();
                cbFuncionarios.SelectedIndex = -1;
                cbNrProcesso.SelectedIndex = -1;
                cbNrProjeto.SelectedIndex = -1;

                btRegistar.Enabled = true;
                btGuardarAlt.Enabled = false;
                btAtribuirDoc.Enabled = false;
                btEliminar.Enabled = false;
            }
            catch (ArgumentOutOfRangeException aorex)
            {
                MessageBox.Show("Erro ao tentar aceder à DataGriedView\n\r" + aorex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (NotSupportedException nsex)
            {
                MessageBox.Show("Erro ao tentar guardar o parecer\n\r" + nsex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidOperationException ioex)
            {
                MessageBox.Show("Erro ao tentar guardar o parecer\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Parecer\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void dataGridViewPareceres_Click(object sender, EventArgs e)
        {
            /*camera.Dispose();
            camera = new Model1Container();*/

            try
            {
                Parecer p = (Parecer)dataGridViewPareceres.SelectedRows[0].DataBoundItem;

                tbTexto.Text = p.TextoParecer;
                dtData.Value = p.DataParecer;
                cbFuncionarios.Text = p.Funcionario.ToString();
              

                var projeto = from Projeto in camera.ProjetoSet where Projeto.Id.Equals(p.ProjetoId) select Projeto;
                Projeto proj = projeto.ToList<Projeto>()[0];

                cbNrProjeto.Text = proj.ToString();

                var processo = from Processo in camera.ProcessoSet where Processo.Id.Equals(p.ProjetoProcessoId) select Processo;
                Processo pro = processo.ToList<Processo>()[0];

                cbNrProcesso.Text = pro.ToString();

                btGuardarAlt.Enabled = true;
                btRegistar.Enabled = false;
                btAtribuirDoc.Enabled = true;
                btEliminar.Enabled = true;
            }
            catch (ArgumentOutOfRangeException aorex)
            {
                MessageBox.Show("Operação inválida - Use a seta para selecionar os dados\n\r" + aorex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Processo\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch(System.NullReferenceException ne)
            {
                MessageBox.Show("Erro ao carregar a informação\n\r" + ne.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void button5_Click(object sender, EventArgs e)
        {
            //mostrar todos
            try
            {
                cbNrProjetoList.Text = null;
                dataGridViewPareceres.DataSource = null;
                dataGridViewPareceres.DataSource = camera.ParecerSet.ToList<Parecer>();
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Parecer\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btPesquisar_Click(object sender, EventArgs e)
        {
            try
            {
                Projeto p = (Projeto)cbNrProjetoList.SelectedItem;

                camera.Dispose();
                camera = new Model1Container();
                (from Parecer in camera.ParecerSet where Parecer.ProjetoId.Equals(p.Id) select Parecer).ToList();

                dataGridViewPareceres.DataSource = camera.ParecerSet.Local.ToList<Parecer>();
            }
            catch (ArgumentNullException anex)
            {
                MessageBox.Show("Erro ao tentar aceder à tabela Parecer\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btSair_Click(object sender, EventArgs e)
        {
            try
            {
                this.Close();
            }
            catch (InvalidOperationException ioex)
            {
                MessageBox.Show("Erro ao tentar fechar este form\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btAtribuirDoc_Click(object sender, EventArgs e)
        {

            try
            {
                Parecer p = (Parecer)dataGridViewPareceres.SelectedRows[0].DataBoundItem;

                AtribuirDocs ad = new AtribuirDocs(p.Numero, p.ProjetoId);
                ad.Show();
            }
            catch (ArgumentOutOfRangeException aorex)
            {
                MessageBox.Show("Erro ao tentar aceder à DataGriedView\n\r" + aorex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btLimpar_Click(object sender, EventArgs e)
        {

            dtData.ResetText();
            cbNrProcesso.SelectedIndex = -1;
            cbNrProjeto.SelectedIndex = -1;
            cbFuncionarios.SelectedIndex = -1;
            tbTexto.Text = "";

            btAtribuirDoc.Enabled = false;
            btRegistar.Enabled = true;
            btGuardarAlt.Enabled = false;
            btEliminar.Enabled = false;
        }

        private void btEliminar_Click(object sender, EventArgs e)
        {
            DialogResult resposta = MessageBox.Show("Deseja mesmo eliminar o parcer?", "Eliminar?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (resposta == DialogResult.Yes)
            {
                try
                {
                    Parecer p = (Parecer)dataGridViewPareceres.SelectedRows[0].DataBoundItem;
                    camera.ParecerSet.Remove(p);
                    camera.SaveChanges();

                    dtData.ResetText();
                    cbNrProcesso.SelectedIndex = -1;
                    cbNrProjeto.SelectedIndex = -1;
                    cbFuncionarios.SelectedIndex = -1;
                    tbTexto.Text = "";

                    dataGridViewPareceres.DataSource = null;
                    dataGridViewPareceres.DataSource = camera.ParecerSet.ToList<Parecer>();

                    btRegistar.Enabled = true;
                    btGuardarAlt.Enabled = false;
                    btEliminar.Enabled = false;
                    btAtribuirDoc.Enabled = false;
                }
                catch (NotSupportedException nsex)
                {
                    MessageBox.Show("Erro ao tentar apagar o parecer\n\r" + nsex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                catch (InvalidOperationException ioex)
                {
                    MessageBox.Show("Erro ao tentar apagar o parecer\n\r" + ioex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                catch (ArgumentNullException anex)
                {
                    MessageBox.Show("Erro ao tentar aceder à tabela parecer\n\r" + anex.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                catch(System.Data.Entity.Infrastructure.DbUpdateException dbe)
                {
                    MessageBox.Show("Erro ao apagar o parecer, verifique se apagou todos os documentos associados\n\r" + dbe.Message, "ERRO", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                

            }
        }
    }
}
